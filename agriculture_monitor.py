# -*- coding: utf-8 -*-
"""agriculture_monitor

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qoy9IPHcvLHR-cQ7L-MJw24yU0GyRvU1
"""

import cv2
import numpy as np
from yolov11n import YOLOv11nDetector


class AgricultureMonitor:
    def __init__(self, model_path):
        """
        Initialize the AgricultureMonitor with the YOLOv11n model.
        """
        self.detector = YOLOv11nDetector(model_path)

    def preprocess_image(self, image):
        """
        Preprocess the image for YOLOv11n input.
        """
        processed_image = cv2.resize(image, (640, 640))  # Resize for YOLOv11n
        processed_image = processed_image / 255.0  # Normalize
        return processed_image

    def detect_objects(self, image):
        """
        Perform object detection on the input image.
        """
        detections = self.detector.detect(image)
        return detections

    def classify_health(self, detection):
        """
        Classify the health status of detected crops based on label or other features.
        """
        label = detection[-1]  # Label is the last value in detection
        if label == "healthy_crop":
            return "Healthy"
        elif label == "unhealthy_crop":
            return "Unhealthy"
        else:
            return "Unknown"

    def count_objects(self, detections):
        """
        Count detected objects by category.
        """
        counts = {"healthy_crops": 0, "unhealthy_crops": 0, "others": 0}
        for detection in detections:
            label = detection[-1]
            if label == "healthy_crop":
                counts["healthy_crops"] += 1
            elif label == "unhealthy_crop":
                counts["unhealthy_crops"] += 1
            else:
                counts["others"] += 1
        return counts

    def annotate_image(self, image, detections):
        """
        Annotate the image with bounding boxes and labels.
        """
        for det in detections:
            x, y, w, h, conf, label = det[:6]
            color = (0, 255, 0) if label == "healthy_crop" else (0, 0, 255)
            cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
            text = f"{label} ({conf:.2f})"
            cv2.putText(image, text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        return image

    def save_results(self, image, counts, output_path="output.jpg"):
        """
        Save the annotated image and detection results.
        """
        cv2.imwrite(output_path, image)
        print(f"Results saved to {output_path}")
        print("Object counts:", counts)

    def monitor(self, image_path):
        """
        Full pipeline for monitoring crops and animals.
        """
        print("Loading image...")
        image = cv2.imread(image_path)
        processed_image = self.preprocess_image(image)

        print("Detecting objects...")
        detections = self.detect_objects(processed_image)

        print("Classifying health and counting objects...")
        counts = self.count_objects(detections)

        print("Annotating image...")
        annotated_image = self.annotate_image(image, detections)

        print("Saving results...")
        self.save_results(annotated_image, counts)


# Utility functions for flexibility and testing
def display_image(image, window_name="Image"):
    """
    Display an image in a resizable window.
    """
    cv2.imshow(window_name, image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == "__main__":
    # Initialize the monitor
    monitor = AgricultureMonitor("../model/yolov11n_weights.onnx")

    # Test the pipeline
    test_image_path = "../data/test_images/sample.jpg"
    monitor.monitor(test_image_path)